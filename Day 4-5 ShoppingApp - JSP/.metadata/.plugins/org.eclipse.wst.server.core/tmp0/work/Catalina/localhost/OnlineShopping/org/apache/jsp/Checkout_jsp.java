/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.2
 * Generated at: 2024-12-18 11:47:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.pojos.CartItem;
import java.util.ArrayList;
import java.sql.ResultSet;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.Connection;
import jakarta.servlet.ServletContext;

public final class Checkout_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(11);
    _jspx_imports_classes.add("com.pojos.CartItem");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("jakarta.servlet.ServletContext");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.sql.Date");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");

		ServletContext context = getServletContext();
	
		String dbUrl = context.getInitParameter("dbUrl");
		String dbDriver = context.getInitParameter("dbDriver");
		String dbUsername = context.getInitParameter("dbUsername");
		String dbPassword = context.getInitParameter("dbPassword");
		
		Class.forName(dbDriver);
		
		try(Connection connection = DriverManager.getConnection(dbUrl, dbUsername, dbPassword);
				PreparedStatement psCardInfo = connection.prepareStatement("select * from cards where cardNo = ? and expiryDate = ?");
				PreparedStatement psUpdateBal = connection.prepareStatement("update cards set balance = ? where cardNo = ?");
				PreparedStatement psUpdateTrans = connection.prepareStatement("insert into transaction (username, cardNo, amount, txDate, status) values (?,?,?,?,?)")){
			
			
			String temp = request.getParameter("cardNumber");
			int cardNumber = Integer.parseInt(temp);
			
			String expiryDate = request.getParameter("expiryDate");
			
			
			String username = (String) session.getAttribute("username");
			
			
			ResultSet resultCard = null;
			psCardInfo.setInt(1, cardNumber);
			psCardInfo.setString(2, expiryDate);
			resultCard = psCardInfo.executeQuery();
			
			
			
			double cartTotal = (double)session.getAttribute("total");
			int status = 0;
			if(resultCard.next()){
				
				double bal = resultCard.getDouble("balance");
				String expDbDate = resultCard.getString("expiryDate");
				
				if(bal >= cartTotal && expiryDate.equals(expDbDate)){
					
					double updateBal = bal - cartTotal;
					psUpdateBal.setDouble(1, updateBal);
					psUpdateBal.setDouble(2, cardNumber);
					psUpdateBal.executeUpdate();
					status = 1;
				}
				else{
					
      out.write("\r\n");
      out.write("					\r\n");
      out.write("					<h3 style=\"color: red;\" >Not Enough Balance ? Can Add Another Card</h3>\r\n");
      out.write("					");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "UserCardDetails.html", out, false);
      out.write("\r\n");
      out.write("					");

				}
				
				psUpdateTrans.setString(1, username);
				psUpdateTrans.setInt(2, cardNumber);
				psUpdateTrans.setDouble(3, cartTotal);
				psUpdateTrans.setDate(4, new Date(System.currentTimeMillis()));
				psUpdateTrans.setInt(5, status);
				
				psUpdateTrans.executeUpdate();
				
				if(status == 1){
				
      out.write("\r\n");
      out.write("				\r\n");
      out.write("					<h3 style=\"color: green;\">Payment Successful</h3>\r\n");
      out.write("					<a href=\"ListCart\">Cart</a>\r\n");
      out.write("				");

				
				ArrayList<CartItem> cart = (ArrayList<CartItem>)session.getAttribute("cart");
				cart.removeAll(cart);
				
				}
			}else{
				
				
      out.write("\r\n");
      out.write("				\r\n");
      out.write("				<h3 style=\"color: red;\" >Card Not Found</h3>\r\n");
      out.write("					");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "UserCardDetails.html", out, false);
      out.write("\r\n");
      out.write("				\r\n");
      out.write("				");

				
				
			}
			
			
			
		}
	
	
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
